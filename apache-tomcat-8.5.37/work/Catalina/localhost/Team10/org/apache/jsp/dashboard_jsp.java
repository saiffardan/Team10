/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.37
 * Generated at: 2019-01-28 16:10:19 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.io.*;
import java.util.*;

public final class dashboard_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("java.util");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("java.io");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("<!DOCTYPE html>\n");
      out.write("<html>\n");
      out.write("    <head>\n");
      out.write("        <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\n");
      out.write("        <title>Exam Review System</title>\n");
      out.write("        <link rel=\"shortcut icon\" href=\"/favicon.ico\" type=\"image/x-icon\">\n");
      out.write("        <link rel=\"icon\" href=\"favicon.ico\" type=\"image/x-icon\">\n");
      out.write("        <link href=\"uploadcss.css\" rel=\"stylesheet\" type=\"text/css\">\n");
      out.write("        <link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.4.0/css/bootstrap.min.css\">\n");
      out.write("\n");
      out.write("    <nav class=\"navbar navbar-default\">\n");
      out.write("        <div class=\"container-fluid\">\n");
      out.write("            <div class=\"navbar-header\">\n");
      out.write("                <a href=\"dashboard.jsp\">\n");
      out.write("                    <img alt=\"Uni of Dundee crest\" src=\"Dundeebadge.png\" height=\"50\" width=\"50\"> \n");
      out.write("                </a>\n");
      out.write("            </div>\n");
      out.write("\n");
      out.write("            Hello ");
      out.print( session.getAttribute("username"));
      out.write("!\n");
      out.write("\n");
      out.write("            <a href=\"logout.jsp\"> <button type=\"button\" class=\"btn btn-default navbar-btn\"style=\"float:right\">Logout</button>  </a>\n");
      out.write("        </div>\n");
      out.write("    </nav>\n");
      out.write("\n");
      out.write("</head>\n");
      out.write("\n");
      out.write("\n");
      out.write("<body>\n");
      out.write("    <div class = \"dashbg\">\n");
      out.write("    </div>\n");
      out.write("    <div class = \"sidebar\">\n");
      out.write("        <h1> Account settings </h1>\n");
      out.write("        <br>\n");
      out.write("        <li> Current account: ");
      out.print( session.getAttribute("username"));
      out.write(" </li>\n");
      out.write("        <br>\n");
      out.write("        <li> Not you? <a href = \"\"> Switch Account </a>  </li>\n");
      out.write("        <br>\n");
      out.write("        <li> <a href = \"\"> Change Password </a> </li>\n");
      out.write("        <br>\n");
      out.write("        <br>\n");
      out.write("        <h2> Staff Tools </h2>\n");
      out.write("        <br>\n");
      out.write("        <li> <a href = \"\">Exam Progress Tracker</a> </li>\n");
      out.write("        <br>\n");
      out.write("        <li> <a href = \"\">  </a> </li>\n");
      out.write("        <br>\n");
      out.write("    </div>\n");
      out.write("\n");
      out.write("    <div class = \"exambox\">\n");
      out.write("        <h1> Open Exams: </h1>\n");
      out.write("        ");

            File[] files = new File("/exams").listFiles();
            int x = 0;
            String defaultName = "progBar";
            String name;

            for (File file : files) {
                x++;
                name = defaultName.concat(Integer.toString(x));
                if (file.isDirectory()) {
                    out.println("<li> <a href = \"exam.jsp?folder=" + file.getName() + "\"> " + file.getName() + " </a> </li>");
                    // Saif - Create a progress bar for each exam paper, and give each a unique name eg. progBar1, progBar2 etc... 
                    // - Allows for dynamic generation of progress bars depending on how many exam papers there are
        
      out.write("\n");
      out.write("        <div class=\"progress\" style=\"height: 18px;\">\n");
      out.write("            <div id=\"");
      out.print(name);
      out.write("\" class=\"progress-bar progress-bar-animated\" role=\"progressbar\"  aria-valuenow=\"0\" aria-valuemin=\"0\" aria-valuemax=\"100\" style=\"width: 0%\" >Example</div>\n");
      out.write("        </div>\n");
      out.write("        ");

                }

            }
            // Saif - make n be == to the value of x so that we can use n in the <script> below
            out.print("<script> var n; n =");
            out.print(x + "</script>");
        
      out.write("\n");
      out.write("\n");
      out.write("        <a href=\"createexam.jsp\"> <button type=\"button\" class=\"btn btn-default navbar-btn\">Upload New</button>  </a>\n");
      out.write("        <a onclick=\"testFunction()\"> <button type=\"button\" class=\"btn btn-default navbar-btn\">Click me</button></a>\n");
      out.write("    </div>\n");
      out.write("    <br>\n");
      out.write("    <div class = \"historybox\">\n");
      out.write("        <h1> Admin tools </h1>\n");
      out.write("        <li> <a href = \"useraccount.jsp\"> Account Oversee</li>\n");
      out.write("        <br>\n");
      out.write("        <li> <a href = \"createAccount.jsp\">  Create Account</li>\n");
      out.write("        <br>\n");
      out.write("        <li> <a href = \"exam.jsp\">Full Exam listing</li>\n");
      out.write("        <br>\n");
      out.write("    </div>\n");
      out.write("    <script>\n");
      out.write("        function testFunction() {\n");
      out.write("            var i;\n");
      out.write("            // Saif - This is a temporary functionality which shows how progress bars will look like\n");
      out.write("            // - A dynamic solution to change more than one progress bar at once\n");
      out.write("            for (i = 1; i <= n; i++) {\n");
      out.write("                if (document.getElementById(\"progBar\" + i).style.width === \"0%\") {\n");
      out.write("                    document.getElementById(\"progBar\" + i).style.width = \"25%\";\n");
      out.write("                } else if (document.getElementById(\"progBar\" + i).style.width === \"25%\") {\n");
      out.write("                    document.getElementById(\"progBar\" + i).style.width = \"50%\";\n");
      out.write("                } else if (document.getElementById(\"progBar\" + i).style.width === \"50%\") {\n");
      out.write("                    document.getElementById(\"progBar\" + i).style.width = \"75%\";\n");
      out.write("                } else if (document.getElementById(\"progBar\" + i).style.width === \"75%\") {\n");
      out.write("                    document.getElementById(\"progBar\" + i).style.width = \"100%\";\n");
      out.write("                } else if (document.getElementById(\"progBar\" + i).style.width === \"100%\") {\n");
      out.write("                    document.getElementById(\"progBar\" + i).style.width = \"0%\";\n");
      out.write("                }\n");
      out.write("            }\n");
      out.write("        }\n");
      out.write("    </script>\n");
      out.write("</body>\n");
      out.write("</html>\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
